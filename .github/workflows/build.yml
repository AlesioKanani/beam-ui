name: Build

on: [push]

env:
  BUILD_TYPE: Release
  BUILD_CONFIG: RelWithDebInfo

jobs:
###############################################################################
# Build Desktop
###############################################################################
  build_desktop:
    runs-on: ${{ matrix.os }}
    # if: ${{false}}
    strategy:
      matrix:
        os: [windows-2019]
        # os: [macos-10.15, ubuntu-18.04, ubuntu-20.04, windows-2019]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Submodule update
      shell: bash
      run: |
        git submodule update --init --recursive --remote --jobs 4
        cd beam
        git apply 3rdparty/protobuf-patch.diff

###############################################################################
# Create Build Environment
###############################################################################

    - name: Create Build Environment [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        echo $GITHUB_WORKSPACE
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV

    - name: Create Build Environment [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libssl-dev curl libxi-dev libcups2-dev -y

    - name: Create Build Environment [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
        echo "OPENSSL_ROOT_DIR=c:\beam-libs\openssl" >> $GITHUB_ENV
        git clone --depth=1 https://github.com/nesbox/qt5-static-win.git c:/beam-libs/qt5-static-win
        echo "QT5_ROOT_DIR=c:\beam-libs\qt5-static-win" >> $GITHUB_ENV
        echo "QML_IMPORT_PATH=c:\beam-libs\qt5-static-win\qml" >> $GITHUB_ENV

    - name: Download boost [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        curl -O https://raw.githubusercontent.com/Homebrew/homebrew-core/5da5895add2f6b9320d654dd844d4827f6876c8b/Formula/boost.rb
        brew install ./boost.rb 

    - name: Download boost [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        git clone https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git ${{runner.workspace}}/boost_prebuild
        echo "BOOST_INCLUDEDIR=${{runner.workspace}}/boost_prebuild/include" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=${{runner.workspace}}/boost_prebuild/lib/" >> $GITHUB_ENV

###############################################################################
# Configure CMake
###############################################################################
    - name: Configure CMake [macos-10.15 && ununtu all]
      if: matrix.os != 'windows-2019'
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=$GITHUB_REF -DBEAM_HW_WALLET=Off .

    - name: Configure CMake [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        export PATH=c:\beam-libs\qt5-static-win\bin:$PATH
        cmake -G "Visual Studio 16 2019" -A x64 -B"${{runner.workspace}}\build" -DBOOST_ROOT=$BOOST_ROOT_1_72_0 -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=$GITHUB_REF -DBEAM_HW_WALLET=Off .
        ls -la ${{runner.workspace}}\build\ui

    - name: Save version info
      shell: bash
      run: |
        echo "BEAM_VERSION=$(cat beam_version.gen)" >> $GITHUB_ENV
        echo "BEAM_TARGET_SUFFIX=-masternet" >> $GITHUB_ENV
        rm beam_version.gen
        pwd
        ls -la ui
        ls -la ui/i18n

###############################################################################
# Build
###############################################################################
    # - name: Build [macos-10.15]
    #   if: matrix.os == 'macos-10.15'
    #   run: cmake --build . --parallel --config $BUILD_TYPE

    # - name: Build [ununtu all]
    #   shell: bash
    #   if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
    #   run: make -j$(nproc)

    # - name: Build [windows]
    #   shell: bash
    #   if: matrix.os == 'windows-2019'
    #   run: cmake --build . --parallel --config $BUILD_CONFIG
