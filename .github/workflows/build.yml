name: Build

on: [push]

env:
  BUILD_TYPE: Release
  BUILD_CONFIG: RelWithDebInfo

jobs:
###############################################################################
# Build Desktop
###############################################################################
  build_desktop:
    runs-on: ${{ matrix.os }}
    # if: ${{false}}
    strategy:
      matrix:
        os: [macos-10.15, windows-2019]
        # os: [ubuntu-20.04]
        # os: [macos-10.15, ubuntu-18.04, ubuntu-20.04, windows-2019]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Submodule update
      shell: bash
      run: |
        git submodule update --init --recursive --remote --jobs 4
        cd beam
        git apply 3rdparty/protobuf-patch.diff

###############################################################################
# Create Build Environment
###############################################################################

    - name: Create Build Environment [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        echo $GITHUB_WORKSPACE
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV
        wget --no-check-certificate https://builds.beam.mw/QT5/qt5.12.9-static.tar.gz
        mkdir ${{runner.workspace}}/qt5-static
        tar -xf qt5.12.9-static.tar.gz -C ${{runner.workspace}}/qt5-static
        echo "QT5_ROOT_DIR=${{runner.workspace}}/qt5-static" >> $GITHUB_ENV
        echo "QML_IMPORT_PATH=${{runner.workspace}}/qt5-static/qml" >> $GITHUB_ENV

    - name: Create Build Environment [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt update
        sudo apt install build-essential llvm libclang-dev
        sudo apt install libssl-dev curl libcups2-dev mesa-common-dev ^libxcb.* libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev libfontconfig1-dev libudev-dev -y
        sudo apt install libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxkbcommon-dev libxkbcommon-x11-dev -y
        git clone --depth=1 https://github.com/echoby/qt5.12.9-static-linux.git ${{runner.workspace}}/qt5-static
        chmod +x ${{runner.workspace}}/qt5-static/bin/*
        echo "QT5_ROOT_DIR=${{runner.workspace}}/qt5-static" >> $GITHUB_ENV
        echo "QML_IMPORT_PATH=${{runner.workspace}}/qt5-static/qml" >> $GITHUB_ENV

    - name: Create Build Environment [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
        echo "OPENSSL_ROOT_DIR=c:\beam-libs\openssl" >> $GITHUB_ENV
        git clone --depth=1 https://github.com/nesbox/qt5-static-win.git c:/beam-libs/qt5-static-win
        echo "QT5_ROOT_DIR=c:\beam-libs\qt5-static-win" >> $GITHUB_ENV
        echo "QML_IMPORT_PATH=c:\beam-libs\qt5-static-win\qml" >> $GITHUB_ENV

    - name: Download boost [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        curl -O https://raw.githubusercontent.com/Homebrew/homebrew-core/5da5895add2f6b9320d654dd844d4827f6876c8b/Formula/boost.rb
        brew install ./boost.rb 

    - name: Download boost [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        git clone https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git ${{runner.workspace}}/boost_prebuild
        echo "BOOST_INCLUDEDIR=${{runner.workspace}}/boost_prebuild/include" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=${{runner.workspace}}/boost_prebuild/lib/" >> $GITHUB_ENV

###############################################################################
# Configure CMake
###############################################################################
    - name: Configure CMake [macos-10.15 && ununtu all]
      if: matrix.os != 'windows-2019'
      run: |
        export PATH=${{runner.workspace}}/qt5-static/bin:$PATH
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=$GITHUB_REF -DBEAM_HW_WALLET=Off .

    - name: Configure CMake [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        export PATH=/c/beam-libs/qt5-static-win/bin:$PATH
        cmake -G "Visual Studio 16 2019" -A x64 -DBOOST_ROOT=$BOOST_ROOT_1_72_0 -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=$GITHUB_REF -DBEAM_HW_WALLET=Off .

    - name: Save version info
      shell: bash
      run: |
        echo "BEAM_VERSION=$(cat beam_version.gen)" >> $GITHUB_ENV
        echo "BEAM_TARGET_SUFFIX=-masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX=Masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX2=-Masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX3= Masternet" >> $GITHUB_ENV
        rm beam_version.gen

###############################################################################
# Build
###############################################################################
    - name: Build [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: cmake --build . --parallel --config $BUILD_TYPE

    - name: Build [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: make -j$(nproc)

    - name: Build [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cmake --build . --parallel --config $BUILD_CONFIG

###############################################################################
# Pack
###############################################################################
    - name: CPack [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: cpack

    - name: CPack [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cpack --verbose -G NSIS -C $BUILD_CONFIG

###############################################################################
# Collect artifacts
###############################################################################
    - name: Collect [macos-10.15]
      shell: bash
      if: matrix.os == 'macos-10.15'
      run: |
        mkdir artifacts
        cp BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}-${{env.BEAM_VERSION}}-Darwin.dmg Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.dmg
        echo "BEAM_WALLET_UI_IN=Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.dmg" >> $GITHUB_ENV
    - name: Import Code-Signing Certificates [macos-10.15]
      if: matrix.os == 'macos-10.15'
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
    - name: Sign the mac binaries [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        codesign --deep --force -v -s "${{secrets.MACOS_SIGN_IDENTITY}}" -o runtime --timestamp ${{env.BEAM_WALLET_UI_IN}}
    - name: Notarize [macos-10.15]
      shell: bash
      if: ${{ false }} #matrix.os == 'macos-10.15'
      env:
        MACOS_NOTARIZE_USER: ${{ secrets.MACOS_NOTARIZE_USER }}
        MACOS_NOTARIZE_PASS: ${{ secrets.MACOS_NOTARIZE_USER }}
        MACOS_NOTARIZE_PROVIDER: ${{ secrets.MACOS_NOTARIZE_PROVIDER }}
      run: |
        chmod +x ./notarize.sh
        ./notarize.sh

    - name: Collect [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cp BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}-${{env.BEAM_VERSION}}-win64.exe Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.exe

###############################################################################
# Upload
###############################################################################
    - uses: actions/upload-artifact@v2
      with:
        name: Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}-${{runner.os}}
        path: Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}*
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-2019'
      with:
        name: beam-pdb${{env.BEAM_TARGET_SUFFIX}}-${{env.BEAM_VERSION}}
        path: ui/${{env.BUILD_CONFIG}}/Beam Wallet${{env.BEAM_DISPLAY_SUFFIX3}}.pdb
        if-no-files-found: error
